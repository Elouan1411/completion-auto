Fonction get_suggestions(mot_recherche, contenu_dictionnaire) {
    DISTANCE_MAX = 2
    Initialiser tas avec capacité 4 éléments

    Pour chaque ligne dans contenu_dictionnaire {
        Récupérer le mot et la fréquence
        
        estPrefix = VRAI si le mot commence par mot_recherche
        distance = distance_levenshtein(mot_recherche, mot)

        Si distance > DISTANCE_MAX et ! is_prefix {
            Ignorer ce mot et passer au suivant
        }

        Ajouter une suggestion au tas avec :
            - distance
            - estPrefix
            - fréquence
            - mot
        // Le tas est trié automatiquement selon la priorité (distance, puis is_prefix, puis fréquence)

        Si la taille du tas dépasse 3 éléments {
            Retirer l'élément avec la plus petite priorité (élément minimum dans le tas)
        }
    }

    suggestions = Liste vide
    Pour chaque element dans tas {
        Ajouter element.mot à suggestions
    }
    Retourner suggestions
}
